МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Лабораторна робота №4


з дисципліни
«Архітектура програмного забезпечення»











Харків 2025
1 ІСТОРІЯ ЗМІН
Зміни звіту наведені у таблиці 1.1.
Таблиця 1.1 - Історія змін
№	Дата	Версія звіту	Опис змін
1	19.05.2025	0.1	Створено розділ “Історія змін”
2	19.05.2025	0.1	Створено розділ “Завдання”
3	19.05.2025	0.1	Створено розділ “Опис виконаної роботи”
4	19.05.2025	0.1	Створено розділ “Висновки”
5	19.05.2025	0.1	Доданий Додаток А
6	19.05.2025	0.1	Доданий Додаток Б
7	27.05.2025	0.2	Відредаговано розділ “Опис виконаної роботи”


2 ЗАВДАННЯ
Необхідно розгорнути програмний застосунок.
Проаналізуйте завдання.
Виконайте контрольні завдання.
Відкрийте створений на попередній лабораторній роботі репозиторій GitHub.
Створіть у репозиторії директорію Task5 та текстовий файл з описом інженерних рішень у цій частині проєкту, як вказано у додатку З
Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проєкті.
Створіть у директорії Task5 піддиректорію для програмного коду, як вказано у додатку З
Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни
Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7..10 хвилин з усними поясненнями процесу тестування
Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua
Створіть для завантаженого запису його хронологічний опис.
Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/
У коментарях до завантаженого звіту вкажіть посилання на відеозапис тестування у вашому каналі YouTube.


3 ОПИС ВИКОНАНОЇ РОБОТИ
Серверна частина програмної системи написана на мові програмування Python та використовує фреймворк FastAPI.
Для зберігання даних використовується база даних MariaDB. Для доступу до бази даних використовується Tortoise-ORM. Міграції та оновлення бази даних створюються автоматично за домомогою програми Aerich.
Для керування версіями коду використовується система контролю версій Git, весь код програмної системи доступний у репозиторії за посиланням: https://github.com/NureAranzhyiRuslan/apz-pzpi-22-6-aranzhyi-ruslan.
Для розгортки серверної частини програмної системи використовується технологія контейнеризації docker та інструмент docker compose.
Для резервного копіювання бази даних використовується інструмент mysql-backup, який запущено у Docker.
Доступ до серверної частини через домен налаштовано за домопогою nginx.
Оскільки програмна система доступна у вигляді докер-образу та конфігурації docker compose, Її можно розгорнути будь-де, де підтримуються технології контейнеризації, сумісні з docker. Для розгортки потрібно:
1.Завантажити гіт-репозиторій:
git clone git@github.com:ArRuslan/apz-backend.git
2.Перейти у директорію репозиторію:
cd atark-backend
3.Переіменувати файл з налаштуваннями розгортки:
mv .env.example .env
4.Відкрити та відредагувати файл конфігурації розгортки за допомогою будь-якого текстового редактору:
nano .env
5.Виконати розгортку:
docker compose up -d
Після цього сервера частина будет доступна за адресою 127.0.0.1:8000.
6.Далі потрібно налаштувати nginx, для цього потрібно створити нову конфігурацію серверу у директорії /etc/nginx/sites-enabled, та вказати, що трафік буде направлений на запущений веб-сервер за допомогою 
location / {
proxy_pass http://127.0.0.1:8000;
}
Резервні копії створюються автоматично у docker-volume під назвою apz-backend_mariadb-backup. Отримати путь до резервних копій можна за домогою команди
docker volume inspect --format '{{ .Mountpoint }}' apz-backend_mariadb-backup
Фронтенд частина програмної системи розгорнута за допомогою Cloudflare Pages.


4 ВИСНОВКИ
Під час виконання лабораторної роботи було розгорнуто серверну та веб частини програмної системи.


Додаток А
Посилання на відео та хронологічний опис

Відеозапис доповіді на YouTube: https://youtu.be/2RwOZi00Pn8
Хронологічний опис доповіді:
00:00 Вступ
00:00 Вступ
00:11 Список API ендпоінтів розгорнутої серверної частини
00:17 Створення аккаунта адміністратора
00:57 Адміністрування - керування користувачами
01:13 Адміністрування - керування містами
02:01 Адміністрування - резервні копії
02:20 Реєстрація користувача
02:33 Створення пристроїв
02:55 Редагування пристроїв
03:00 Видалення пристроїв
03:17 Відправка вимірювань з пристрою
03:21 Перегляд даних з пристрою
03:35 Прогноз погоди
04:30 Реєстрація користувача у мобільному застосунку
04:45 Прогноз погоди у мобільному застосунку
05:00 Створення пристроїв у мобільному застосунку
05:30 Перегляд вимірювань у мобільному застосунку
05:35 Редагування пристроїв у мобільному застосунку
06:02 Видалення пристроїв у мобільному застосунку
06:35 Адміністрування - керування вимірюваннями
07:02 Адміністрування - створення та завантаження резервної копії
07:17 Адміністрування - керування пристроями
07:31 Адміністрування - керування правами користувачів


Додаток Б
Програмний код

Б.1 Конфігурація Docker Compose
GitHub репозиторій: https://github.com/NureAranzhyiRuslan/apz-pzpi-22-6-aranzhyi-ruslan/blob/main/Lab5/apz-pzpi-22-6-aranzhyi-ruslan-lab5/docker-compose.yml.

     1	version: '3'
     2	
     3	services:
     4	  mariadb:
     5	    image: mariadb:10.6
     6	    networks: ['idk']
     7	    volumes: ['mariadb_data:/var/lib/mysql']
     8	    environment:
     9	      - MARIADB_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    10	      - MARIADB_DATABASE=idk
    11	      - MARIADB_USER=${MYSQL_USER}
    12	      - MARIADB_PASSWORD=${MYSQL_PASSWORD}
    13	    restart: unless-stopped
    14	    healthcheck:
    15	      test: mysqladmin ping -h localhost
    16	      start_period: 10s
    17	      interval: 10s
    18	      timeout: 5s
    19	      retries: 5
    20	  idk:
    21	    build: .
    22	    pull_policy: build
    23	    ports:
    24	      - '0.0.0.0:8000:8000'
    25	    networks: ['idk']
    26	    volumes: ['idk_data:/idk/data']
    27	    environment:
    28	      - DB_CONNECTION_STRING=mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mariadb/idk
    29	      - JWT_KEY=${JWT_KEY}
    30	    depends_on:
    31	      - mariadb
    32	    restart: unless-stopped
    33	  mariadb-backups:
    34	    image: databack/mysql-backup
    35	    command: dump
    36	    networks: ['idk']
    37	    volumes: ['mariadb_backups:/backups']
    38	    environment:
    39	      - DB_BACKUP_FREQUENCY=3
    40	      - DB_DUMP_TARGET=/backups
    41	      - DB_SERVER=mariadb
    42	      - DB_PORT=3306
    43	      - DB_USER=root
    44	      - DB_PASS=${MYSQL_ROOT_PASSWORD}
    45	    depends_on:
    46	      mariadb:
    47	        condition: service_healthy
    48	    restart: unless-stopped
    49	
    50	networks:
    51	  idk:
    52	    driver: bridge
    53	
    54	volumes:
    55	  mariadb_data:
    56	    driver: local
    57	  mariadb_backups:
    58	    driver: local
    59	  idk_data:
    60	    driver: local
