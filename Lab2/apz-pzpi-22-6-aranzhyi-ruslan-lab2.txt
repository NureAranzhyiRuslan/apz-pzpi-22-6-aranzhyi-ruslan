МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Лабораторна робота №2


з дисципліни
«Архітектура програмного забезпечення»











Харків 2025
1 ІСТОРІЯ ЗМІН
Зміни звіту наведені у таблиці 1.1.
Таблиця 1.1 - Історія змін
№	Дата	Версія звіту	Опис змін
1	27.04.2025	0.1	Створено розділ “Історія змін”
2	27.04.2025	0.1	Створено розділ “Завдання”
3	27.04.2025	0.1	Створено розділ “Опис виконаної роботи”
4	27.04.2025	0.1	Створено розділ “Висновки”
5	28.04.2025	0.1	Доданий Додаток А
6	29.04.2025	0.2	Доданий Додаток Б
7	29.04.2025	0.3	Доданий Додаток В


2 ЗАВДАННЯ
Потрібно розробити серверну / back-end частину програмної системи.
Проаналізуйте завдання (додаток В).
Виконайте контрольні завдання.
Відкрийте створений на попередній лабораторній роботі репозиторій GitHub.
Створіть у репозиторії директорію Task2 та текстовий файл з описом інженерних рішень у цій частині проєкту.
Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проєкті.
Створіть у директорії Task2 піддиректорію для програмного коду.
Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни. Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7-10 хвилин з усними поясненнями процесу тестування.
Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua
Створіть для завантаженого запису його хронологічний опис.
Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/
У коментарях до завантаженого звіту вкажіть посилання на відеозапис тестування у вашому каналі YouTube.


3 ОПИС ВИКОНАНОЇ РОБОТИ
Програмна система має клієнт-серверну архітектуру. Серверна частина реалізована за допомогою фреймворку FastAPI на мові програмування Python. Для збереження даних використовується база даних MariaDB. Автентифікація користувачів відбувається через JWT токени.
Серверна частина складається з наступних модулів:
1. Авторизація: вхід та реєстрація користувачів;
2. Керування профілями користувачів: перегляд та редагування інформації користувачів;
3. Керування користувацькими IoT-сенсорами: додавання, редагування, перегляд та видалення системних та користувацьких IoT-серсорів;
4. Сбір даних з IoT-серсорів: отримання та обробка погодних даних з  IoT-пристроїв;
5. Прогнозування погоди: отримання прогнозва погоди для конкретного міста або IoT-сенсера;
6. Адміністрування: перегляд, редагування та видалення інформації про користувачів,  IoT-серсори та погодні виміри.
На рисунках Б.1-Б.4 у додатку Б наведені UML діаграми прецедентів.
На рисунку Б.4 у додатку Б наведена діаграма розгортання.
На рисунку Б.5 у додатку Б наведена діаграмма компонентів.
На рисунку Б.6 у додатку Б наведена ER-діаграма.

Опис бази даних програмної системи описаний в таблицях 1-6.

Таблиця 1 - Таблиця бази даних “users”
id	BIGINT PRIMARY KEY
first_name	VARCHAR(128)
last_name	VARCHAR(128)
email	VARCHAR(256)
password	VARCHAR(255)
role	SMALLINT
locale	SMALLINT
temperature_units	SMALLINT

Таблиця 2 - Таблиця бази даних “sessions”
id	BIGINT PRIMARY KEY
user_id	BIGINT
nonce	VARCHAR(16)
created_at	DATETIME

Таблиця 3 - Таблиця бази даних “cities”
id	BIGINT PRIMARY KEY
name	VARCHAR(128)
latitude	DOUBLE
longitude	DOUBLE

Таблиця 4 - Таблиця бази даних “sensors”
id	BIGINT PRIMARY KEY
user_id	BIGINT
api_key_part	VARCHAR(32)
city_id	BIGINT
name	VARCHAR(64)

Таблиця 5 - Таблиця бази даних “measurements”
id	BIGINT PRIMARY KEY
sensor_id	BIGINT
temperature	DOUBLE
pressure	DOUBLE
timestamp	DATETIME

Таблиця 6 - Таблиця бази даних “forecasts”
id	BIGINT PRIMARY KEY
city_id	BIGINT
timestamp	DATETIME
temperature	DOUBLE
info_text	VARCHAR(128)
На таблиці 7 наведена прецифікація REST API.

Таблиця 7 - Специфікація API
POST	/auth/register	Регістрація користувачів
POST	/auth/login	Авторизація користувачів
POST	/auth/logout	Вихід користувачів з аккаунту
GET	/user/info	Запит інформації користувача
PATCH	/user/info	Редагування інформації користувача
GET	/sensors	Запит IoT-пристроїв користувача
POST	/sensors	Додавання нового IoT-пристрою користувача
GET	/sensors/{sensor_id}	Запит інформації про IoT-пристрій користувача
PATCH	/sensors/{sensor_id}	Редагування інформації про IoT-пристрій користувача
DELETE	/sensors/{sensor_id}	Видалення IoT-пристрою користувача
POST	/measurements	Відправка погодних даних з IoT-пристрою
GET	/measurements/{sensor_id}	Запит погодних даних з конкретного IoT-пристрою
POST	/forecast/{sensor_id}	Запит прогнозу погоди з конкретного IoT-пристрою
GET	/forecast/city	Запит прогнозу погоди для міста
GET	/admin/cities	Запит інформації про міста
POST	/admin/cities	Додавання нового міста
PATCH	/admin/cities/{city_id}	Редагування міста
DELETE	/admin/cities/{city_id}	Видалення міста
GET	/admin/users	Запит інформації про користувачів
GET	/admin/users/{user_id}	Запит інформації про користувача
DELETE	/admin/users/{user_id}	Видалення користувача
GET	/admin/users/{user_id}/sensors	Запит IoT-пристроїв користувача
GET	/admin/sensors	Запит інформації про IoT-пристрої
GET	/admin/sensors/{sensor_id}	Запит інформації про IoT-пристрої
DELETE	/admin/sensors/{sensor_id}	Видалення IoT-пристрою
GET	/admin/sensors/{sensor_id}/measurements	Запит погодних вимірювань IoT-пристрою
GET	/admin/measurements	Запит інформації про погодні вимірювання
GET	/admin/measurements/{measurement_id}	Запит інформації про погодне вимірювання
DELETE	/admin/measurements/{measurement_id}	Видалення погодного вимірювання


4 ВИСНОВКИ
Під час виконання лабораторної роботи було роброблено серверну частину програмної системи.


Додаток А
Посилання на відео та хронологічний опис

Відеозапис доповіді на YouTube: https://youtu.be/e9GTfEK9TmE
Хронологічний опис доповіді:
00:00 Вступ
00:12 Схема база даних
00:25 Авторизація
01:12 Запит та редагування інформації про користувача
01:40 Запит пристроїв користувача
01:52 Додавання та перегляд міст
02:08 Створення та редагування пристроїв користувача
02:48 Додавання та перегляд вимірювань для пристрою
03:22 Адміністрування: міста
04:02 Адміністрування: користувачі
04:55 Адміністрування: пристрої
05:50 Адміністрування: вимірювання


Додаток Б
Графічні матеріали

Рисунок Б.1 - UML діаграму прецедентів взаємодії адміністратора з системою

Рисунок Б.2 - UML діаграма прецедентів взаємодії користувачів з системою

Рисунок Б.3 - UML діаграма прецедентів взаємодії IoT-пристою з системою

Рисунок Б.4 - UML діаграма розгортання

Рисунок Б.5 - UML діаграма компонентів

Рисунок Б.6 - ER діаграма даних


Додаток В
Програмний код

В.1 Математична обробка прикладних даних
GitHub репозиторій: https://github.com/ArRuslan/apz-backend/blob/master/idk/routers/forecast.py#L13.

     1	AVERAGE_ALTITUDE = 150  # Meters (Ukraine)
     2	WINTER_MONTHS = (12, 1, 2)
     3	SUMMER_MONTHS = (6, 7, 8)
     4	ZERO_KELVIN = -273.15
     5	THERMAL_GRADIENT_PER_METER = 0.0065
     6	
     7	router = APIRouter(prefix="/forecast")
     8	
     9	
    10	def calculate_zambretti_method(
    11	        measurements: list[dict[str, str | float]], real_count: int | None = None, locale: Locale = Locale.EN
    12	) -> dict:
    13	    pressure_mts = [measurement["pressure"] for measurement in measurements]
    14	
    15	    # Pressure trend
    16	    count = len(pressure_mts)
    17	    sum_x = count / 2 * (count - 1)
    18	    sum_y = sum(pressure_mts)
    19	    sum_x_sq = count * (count + 1) * (2 * count + 1) / 6
    20	    sum_xy = sum(map(lambda item: item[0] * item[1], enumerate(pressure_mts)))
    21	    a = count * sum_xy - sum_x * sum_y
    22	    a /= count * sum_x_sq - sum_x * sum_x
    23	    pressure_delta = a * count
    24	
    25	    # Pressure at sea level
    26	    altitude = THERMAL_GRADIENT_PER_METER * AVERAGE_ALTITUDE
    27	    p0 = pressure_mts[-1] * ((1 - altitude / (measurements[-1]["temperature"] + altitude - ZERO_KELVIN)) ** (-5.257))
    28	
    29	    # Zambretti algorithm itself
    30	    if pressure_delta >= 1:
    31	        z = 179 - 20 * p0 / 129
    32	    elif pressure_delta <= -1:
    33	        z = 130 - 10 * p0 / 81
    34	    else:
    35	        z = 147 - 50 * p0 / 376
    36	
    37	    this_month = datetime.now().month
    38	    if this_month in WINTER_MONTHS and pressure_delta <= -1:
    39	        z -= 1
    40	    elif this_month in SUMMER_MONTHS and pressure_delta >= 1:
    41	        z += 1
    42	
    43	    z = int(z)
    44	    next_temp = measurements[-1]["temperature"] + measurements[-1]["temperature"] * a
    45	
    46	    return {
    47	        "info_text": zambretti_text[locale][z - 1],
    48	        "temperature": next_temp,
    49	        "details": {
    50	            "has_details": True,
    51	            "measurements_count": count,
    52	            "measurements_db_count": real_count or count,
    53	            "pressure_average": sum_y / count,
    54	            "pressure_delta": pressure_delta,
    55	            "a": a,
    56	            "p0": p0,
    57	            "z": z,
    58	        }
59	    }

В.2 Адміністрування бізнес-логіки системи
GitHub репозиторій: https://github.com/ArRuslan/apz-backend/blob/master/idk/routers/admin/users.py.

     1	from fastapi import Query, APIRouter
     2	
     3	from idk.dependencies import JwtAuthAdminDepN
     4	from idk.models import User, Sensor
     5	from idk.schemas.common import PaginationResponse, PaginationQuery
     6	from idk.schemas.sensors import SensorInfo
     7	from idk.schemas.user import UserInfoResponse
     8	from idk.utils.custom_exception import CustomMessageException
     9	
    10	router = APIRouter(prefix="/users")
    11	
    12	
    13	@router.get("", dependencies=[JwtAuthAdminDepN], response_model=PaginationResponse[UserInfoResponse])
    14	async def get_users(query: PaginationQuery = Query()):
    15	    db_query = User.all().order_by("id")
    16	    count = await db_query.count()
    17	    users = await db_query.limit(query.page_size).offset(query.page_size * (query.page - 1))
    18	
    19	    return {
    20	        "count": count,
    21	        "result": [
    22	            user.to_json()
    23	            for user in users
    24	        ]
    25	    }
    26	
    27	
    28	@router.get("/{user_id}", dependencies=[JwtAuthAdminDepN], response_model=UserInfoResponse)
    29	async def get_user(user_id: int):
    30	    if (user := await User.get_or_none(id=user_id)) is None:
    31	        raise CustomMessageException("Unknown user.", 404)
    32	
    33	    return user.to_json()
    34	
    35	
    36	@router.delete("/{user_id}", dependencies=[JwtAuthAdminDepN], status_code=204)
    37	async def delete_user(user_id: int):
    38	    await User.filter(id=user_id).delete()
    39	
    40	
    41	@router.get("/{user_id}/sensors", dependencies=[JwtAuthAdminDepN], response_model=PaginationResponse[SensorInfo])
    42	async def get_user_sensors(user_id: int, query: PaginationQuery = Query()):
    43	    if (user := await User.get_or_none(id=user_id)) is None:
    44	        raise CustomMessageException("Unknown user.", 404)
    45	
    46	    db_query = Sensor.filter(owner=user).order_by("id")
    47	    count = await db_query.count()
    48	    sensors = await db_query.limit(query.page_size).offset(query.page_size * (query.page - 1))
    49	
    50	    return {
    51	        "count": count,
    52	        "result": [
    53	            await sensor.to_json()
    54	            for sensor in sensors
    55	        ]
56	    }

В.3 Резервне копіювання користувацьких даних

     1	#!/bin/bash
     2   mariadb-dump -u root idk > backup-$(date "+%d%m%Y-%H%M%S").sql
