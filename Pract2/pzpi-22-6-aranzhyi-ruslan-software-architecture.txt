МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ
УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ




Практична робота №2


з дисципліни
«Архітектура програмного забезпечення»







Харків 2025

1 ІСТОРІЯ ЗМІН
Зміни звіту наведені у таблиці 1.1.
Таблиця 1.1 - Історія змін
№	Дата	Версія звіту	Опис змін
1	24.04.2025	0.1	Створено розділ “Історія змін”
2	24.04.2025	0.1	Створено розділ “Завдання”
3	24.04.2025	0.1	Створено розділ “Опис виконаної роботи”
4	24.04.2025	0.1	Створено розділ “Висновки”
5	25.04.2025	0.1	Додані слайди презентації у Додаток Б
6	26.04.2025	0.1	Додані посилання і хронологічний опис доповіді у Додаток А


2 ЗАВДАННЯ
Підготувати доповідь про архітектуру однієї з відомих складних програмних систем.
Створити та оформити слайди презентації доповіді.
Створити та опублікувати на YouTube відеозапис доповіді.
Оформити та завантажити на dl.nure.ua звіт до виконаної роботи.
При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua.
Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main.
Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань.
Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract2 у репозиторії GitHub.
Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ2.


3 ОПИС ВИКОНАНОЇ РОБОТИ
Discord - це популярна платформа для спілкування, яка поєднує текстові чати, голосові та відеодзвінки. Вона була створена у 2015 році, спочатку для геймерів, але швидко стала популярною серед різних спільнот. Discord дозволяє створювати сервери з різними каналами для обговорень на різні теми. Платформа підтримує інтеграції з іншими сервісами та має відкритий API для створення ботів. Основною перевагою Discord є зручний інтерфейс, висока стабільність роботи та велика кількість функцій для організації спільнот.
Раніше мобільні клієнти Discord були повністю нативними: для Android застосовувалась мова Java, а для iOS - Objective-C та Swift. Це дозволяло використовувати повні можливості кожної платформи, але ускладнювало підтримку коду і синхронізацію нових функцій між додатками.
Сьогодні Discord використовує React Native - кросплатформену технологію, яка дозволяє писати мобільні застосунки за допомогою JavaScript та React. React Native автоматично компілює код у нативні компоненти Android та iOS.
Основні переваги використання React Native:
один код для двох платформ;
швидше оновлення і розгортання нових функцій;
зниження витрат на розробку та підтримку;
велика екосистема готових бібліотек.
Вебклієнт Discord побудований на основі React - популярної бібліотеки JavaScript для створення інтерфейсів користувача. React дозволяє ефективно оновлювати сторінку завдяки віртуальному DOM і компонентній архітектурі, що спрощує розробку складних і динамічних вебзастосунків.
Десктопний застосунок Discord створений за допомогою Electron - фреймворку, який дозволяє запускати вебтехнології (HTML, CSS, JavaScript) у вигляді окремого настільного додатка. Electron об'єднує Chromium і Node.js, що дає доступ як до браузерних, так і до системних можливостей комп'ютера.
Переваги використання React і Electron:
швидкий розвиток завдяки спільному коду між веб- та десктоп-версіями;
підтримка сучасного дизайну та інтерактивних функцій;
спрощена розробка та оновлення клієнтів на різних платформах.
Всі клієнти взаємодіють з сервером за допомогою rest api та вебсокети з використанням json.
Бекенд Discord побудований на мікросервісній архітектурі та використовує кілька технологій для різних задач. Для роботи REST API використовується Python з мікрофреймворком Flask. Flask - легкий і гнучкий інструмент для створення вебсервісів, який добре підходить для розробки масштабованого API.
Для обробки реального часу, тобто повідомлень через вебсокети, Discord використовує мову Elixir. Elixir побудований на базі Erlang і відомий своєю надзвичайною масштабованістю і надійністю для роботи з великою кількістю одночасних з'єднань.
Вебсокет-трафік у Discord також підтримує стиснення через zlib та zstd - це дозволяє значно зменшити обсяг переданих даних і пришвидшити обмін повідомленнями.
Для передачі голосу Discord використовує комбінацію WebSockets і WebRTC. WebSockets забезпечують постійне з’єднання між клієнтом і сервером для швидкого обміну керуючими повідомленнями - наприклад, приєднання до голосового каналу або налаштування сесії.
WebRTC (Web Real-Time Communication) використовується для безпосередньої передачі голосових і відеоданих між клієнтами. WebRTC підтримує P2P-з'єднання (peer-to-peer) і дозволяє зменшити затримки під час розмови. Якщо пряме з'єднання неможливе, Discord автоматично використовує спеціальні сервери-посередники (relay-сервери).
Архітектура баз даних Discord кілька разів змінювалась у процесі масштабування сервісу.
Спочатку використовувалась MongoDB - документоорієнтована NoSQL база даних, яка добре підходить для швидкого прототипування завдяки гнучкій структурі даних. Проте зі зростанням кількості користувачів виникла потреба у кращій горизонтальній масштабованості.
Наступним кроком стала Apache Cassandra - розподілена база даних, орієнтована на обробку великих обсягів даних із високою доступністю та стійкістю до відмов.
Cassandra забезпечила кращу продуктивність, але з часом Discord перейшов на ScyllaDB - сучасну альтернативу Cassandra, написану на C++. ScyllaDB сумісна з Cassandra, але забезпечує значно більшу швидкість та ефективніше використання апаратних ресурсів завдяки низькорівневій оптимізації.
Для кешування активно використовується Redis - високопродуктивне in-memory сховище, яке дозволяє швидко зчитувати часто використовувані дані та зменшувати навантаження на основні бази даних.
Для внутрішньої комунікації між сервісами Discord спочатку використовувалась власна розробка під назвою Loqui - легкий протокол обміну повідомленнями, оптимізований під потреби Discord. Проте з ростом системи виникла потреба у стандартизованішому та масштабованішому рішенні.
Сьогодні Discord використовує gRPC - сучасний відкритий фреймворк від Google для віддалених викликів процедур (Remote Procedure Call). gRPC працює поверх HTTP/2 і підтримує передачу даних у компактному бінарному форматі (Protocol Buffers).
Для обробки мультимедійних файлів (зображень, відео та інших медіаданих) Discord використовує власний сервіс Lilliput, написаний мовою програмування Go. Lilliput працює як media proxy - він приймає медіафайли, змінює їхній розмір, оптимізує або конвертує у потрібний формат перед передачею користувачам. Go забезпечує високу продуктивність і малу затримку при обробці запитів, що особливо важливо для великого потоку мультимедійних даних у реальному часі.
Для реалізації функцій пошуку в Discord використовується Elasticsearch - потужний розподілений пошуковий движок, який базується на Apache Lucene. Elasticsearch дозволяє ефективно здійснювати пошук по великих обсягах даних, таких як повідомлення в чатах, медіафайли та інша інформація, що зберігається в системі. Він підтримує функції повнотекстового пошуку, фільтрації та агрегацій, що робить його ідеальним для запитів у реальному часі.
Для захисту і оптимізації доступу до публічних сервісів Discord використовує Cloudflare. Cloudflare виступає як проміжний шар (CDN і проксі-сервер) між користувачами та інфраструктурою Discord. Він забезпечує швидку доставку контенту, захист від атак (зокрема DDoS) і балансування навантаження по всьому світу.
Для розгортання та управління інфраструктурою Discord використовує Google Cloud Platform (GCP). GCP надає масштабовані сервери, мережеві сервіси та зберігання даних, що дозволяє Discord легко обслуговувати сотні мільйонів користувачів по всьому світу.
Контейнери додатків запускаються в Docker - технології, яка дозволяє упакувати програму разом із усіма її залежностями в один контейнер.
Для оркестрації великої кількості контейнерів використовується Kubernetes - потужна система управління контейнерами, яка автоматично масштабує, оновлює і відновлює сервіси при збоях.


4 ВИСНОВКИ
Архітектура програмного забезпечення Discord є високопродуктивною, масштабованою та надійною, що дозволяє забезпечити безперебійне обслуговування мільйонів користувачів по всьому світу. Використання сучасних технологій, таких як React, Electron, gRPC, Elasticsearch, WebRTC та інших, дозволяє Discord ефективно обробляти велику кількість запитів, забезпечувати зручний користувацький інтерфейс і забезпечувати високі стандарти безпеки та продуктивності.
Підхід до використання таких інструментів, як Cloudflare, Docker, Kubernetes, а також ефективне управління базами даних через ScyllaDB та Redis, дозволяє Discord швидко масштабувати свою інфраструктуру і знижувати навантаження на сервери при обробці великих обсягів трафіку. Ці технології також сприяють підвищенню стабільності та відмовостійкості системи.
Загалом, архітектура Discord демонструє правильне застосування сучасних технологій для створення потужного і масштабованого сервісу, що може обслуговувати величезну кількість одночасних користувачів, забезпечуючи високу продуктивність, надійність та безпеку.


Додаток А
Посилання на відео та хронологічний опис
Відеозапис доповіді на YouTube: https://youtu.be/-B-cxcJvXsk
Хронологічний опис доповіді:
00:00 Вступ
00:10 Що таке Discord
00:43 Загальна діаграма архітектури Discord
00:57 Мобільні клієнти
01:45 Веб та десктопний клієнти
02:18 Серверна частина
03:19 Серверна частина: передача аудіо
04:10 Бази даних
05:09 Технології внутрішньо комунікації сервісів
05:58 Обробка мультимедіа
06:48 Технології пошуку
07:31 Використання Cloudflare для захисту
08:00 Розгортання серверної частини
08:31 Висновки
09:30 Список використаних джерел


Додаток Б
Слайди презентації №1


Рисунок Б.1 - Титульний слайд презентації

Рисунок Б.2 - Короткий опис Discord

Рисунок Б.3 - Слайд презентації «Загальна діаграма архітектури»

Рисунок Б.4 - Слайд презентації «Мобільні клієнти»

Рисунок Б.5 - Слайд презентації «Веб та десктопний клієнти»

Рисунок Б.6 - Слайд презентації «Серверна частина»

Рисунок Б.7 - Слайд презентації «Серверна частина: передача аудіо»

Рисунок Б.8 - Слайд презентації «Бази даних»

Рисунок Б.9 - Слайд презентації «Внутрішня комунікація між вузлами системи»

Рисунок Б.10 - Слайд презентації «Обробка мультимедіа»

Рисунок Б.11 - Слайд презентації «Технології пошуку»

Рисунок Б.12 - Слайд презентації «Cloudflare»

Рисунок Б.13 - Слайд презентації «Розгортання серверної частини»

Рисунок Б.14 - Слайд презентації «Висновки»

Рисунок Б.15 - Слайд презентації «Використані джерела»
